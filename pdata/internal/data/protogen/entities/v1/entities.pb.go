// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/entities/v1/entities.proto

package v1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"

	v1 "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	_ "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EntitiesData represents the entities data that can be stored in a persistent storage,
// OR can be embedded by other protocols that transfer OTLP entities data but do not
// implement the OTLP protocol.
//
// The main difference between this message and collector protocol is that
// in this message there will not be any "control" or "metadata" specific to
// OTLP protocol.
//
// When new fields are added into this message, the OTLP request MUST be updated
// as well.
type EntitiesData struct {
	ScopeEntities []*ScopeEntities `protobuf:"bytes,1,rep,name=scope_entities,json=scopeEntities,proto3" json:"scope_entities,omitempty"`
}

func (m *EntitiesData) Reset()         { *m = EntitiesData{} }
func (m *EntitiesData) String() string { return proto.CompactTextString(m) }
func (*EntitiesData) ProtoMessage()    {}
func (*EntitiesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23658fae9436c0cd, []int{0}
}
func (m *EntitiesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntitiesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntitiesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntitiesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitiesData.Merge(m, src)
}
func (m *EntitiesData) XXX_Size() int {
	return m.Size()
}
func (m *EntitiesData) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitiesData.DiscardUnknown(m)
}

var xxx_messageInfo_EntitiesData proto.InternalMessageInfo

func (m *EntitiesData) GetScopeEntities() []*ScopeEntities {
	if m != nil {
		return m.ScopeEntities
	}
	return nil
}

// A collection of Entities produced by a Scope.
type ScopeEntities struct {
	// The instrumentation scope information for the entities in this message.
	// Semantically when InstrumentationScope isn't set, it is equivalent with
	// an empty instrumentation scope name (unknown).
	Scope        v1.InstrumentationScope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope"`
	EntityStates []*EntityState          `protobuf:"bytes,2,rep,name=entity_states,json=entityStates,proto3" json:"entity_states,omitempty"`
	// This schema_url applies to all entities in the "entity_events" field.
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (m *ScopeEntities) Reset()         { *m = ScopeEntities{} }
func (m *ScopeEntities) String() string { return proto.CompactTextString(m) }
func (*ScopeEntities) ProtoMessage()    {}
func (*ScopeEntities) Descriptor() ([]byte, []int) {
	return fileDescriptor_23658fae9436c0cd, []int{1}
}
func (m *ScopeEntities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeEntities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeEntities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeEntities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeEntities.Merge(m, src)
}
func (m *ScopeEntities) XXX_Size() int {
	return m.Size()
}
func (m *ScopeEntities) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeEntities.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeEntities proto.InternalMessageInfo

func (m *ScopeEntities) GetScope() v1.InstrumentationScope {
	if m != nil {
		return m.Scope
	}
	return v1.InstrumentationScope{}
}

func (m *ScopeEntities) GetEntityStates() []*EntityState {
	if m != nil {
		return m.EntityStates
	}
	return nil
}

func (m *ScopeEntities) GetSchemaUrl() string {
	if m != nil {
		return m.SchemaUrl
	}
	return ""
}

// The full state of the Entity.
type EntityState struct {
	// Time when this state was observed.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Set of attributes that identify the entity.
	Id []v1.KeyValue `protobuf:"bytes,3,rep,name=id,proto3" json:"id"`
	// Set of non-identifying attributes only.
	Attributes             []v1.KeyValue `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes"`
	DroppedAttributesCount uint32        `protobuf:"varint,5,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
}

func (m *EntityState) Reset()         { *m = EntityState{} }
func (m *EntityState) String() string { return proto.CompactTextString(m) }
func (*EntityState) ProtoMessage()    {}
func (*EntityState) Descriptor() ([]byte, []int) {
	return fileDescriptor_23658fae9436c0cd, []int{2}
}
func (m *EntityState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityState.Merge(m, src)
}
func (m *EntityState) XXX_Size() int {
	return m.Size()
}
func (m *EntityState) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityState.DiscardUnknown(m)
}

var xxx_messageInfo_EntityState proto.InternalMessageInfo

func (m *EntityState) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EntityState) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EntityState) GetId() []v1.KeyValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EntityState) GetAttributes() []v1.KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EntityState) GetDroppedAttributesCount() uint32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

func init() {
	proto.RegisterType((*EntitiesData)(nil), "opentelemetry.proto.entities.v1.EntitiesData")
	proto.RegisterType((*ScopeEntities)(nil), "opentelemetry.proto.entities.v1.ScopeEntities")
	proto.RegisterType((*EntityState)(nil), "opentelemetry.proto.entities.v1.EntityState")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/entities/v1/entities.proto", fileDescriptor_23658fae9436c0cd)
}

var fileDescriptor_23658fae9436c0cd = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xc7, 0xbd, 0x8a, 0x53, 0xf0, 0x3a, 0xea, 0x61, 0x29, 0x45, 0x84, 0x56, 0x36, 0xbe, 0xd4,
	0x94, 0x22, 0xe1, 0xe4, 0xd2, 0x4b, 0x0f, 0x75, 0x3f, 0xa0, 0x94, 0x92, 0x54, 0x69, 0x72, 0xe8,
	0x45, 0x6c, 0xa4, 0xc1, 0x5d, 0x90, 0x76, 0xc5, 0xee, 0xc8, 0xa0, 0x27, 0xe8, 0xb5, 0xcf, 0xd1,
	0x17, 0xe8, 0x2b, 0xe4, 0x18, 0x7a, 0xea, 0xa9, 0x14, 0xfb, 0x45, 0x8a, 0x56, 0x96, 0xed, 0x14,
	0x83, 0xa1, 0xb7, 0xf9, 0xf8, 0xcf, 0x6f, 0xfe, 0x63, 0xaf, 0x68, 0xa0, 0x0a, 0x90, 0x08, 0x19,
	0xe4, 0x80, 0xba, 0x0a, 0x0b, 0xad, 0x50, 0x85, 0x20, 0x51, 0xa0, 0x00, 0x13, 0xce, 0x27, 0xeb,
	0x38, 0xb0, 0x2d, 0x36, 0xb8, 0xa3, 0x6f, 0x8a, 0xc1, 0x5a, 0x33, 0x9f, 0x1c, 0x3f, 0x98, 0xa9,
	0x99, 0x6a, 0x30, 0x75, 0xd4, 0x28, 0x8e, 0x9f, 0xee, 0x5a, 0x93, 0xa8, 0x3c, 0x57, 0xb2, 0x5e,
	0xd2, 0x44, 0x2b, 0xed, 0x4e, 0x4b, 0x1a, 0x8c, 0x2a, 0x75, 0x02, 0xb5, 0xba, 0x8d, 0x1b, 0xfd,
	0x08, 0xe8, 0xd1, 0x9b, 0x95, 0x81, 0xd7, 0x1c, 0x39, 0xbb, 0xa4, 0xf7, 0x4d, 0xa2, 0x0a, 0x88,
	0x5b, 0x5b, 0x1e, 0x19, 0x1e, 0x8c, 0xfb, 0x27, 0x41, 0xb0, 0xc7, 0x7b, 0x70, 0x51, 0x8f, 0xb5,
	0xac, 0xc8, 0x35, 0xdb, 0xe9, 0xe8, 0x27, 0xa1, 0xee, 0x1d, 0x01, 0x3b, 0xa3, 0x87, 0x56, 0xe2,
	0x91, 0x21, 0x19, 0xf7, 0x4f, 0x4e, 0x77, 0xf2, 0x57, 0xa7, 0xcd, 0x27, 0xc1, 0x3b, 0x69, 0x50,
	0x97, 0x39, 0x48, 0xe4, 0x28, 0x94, 0xb4, 0xac, 0x69, 0xf7, 0xe6, 0xf7, 0xa0, 0x13, 0x35, 0x1c,
	0xf6, 0x91, 0xba, 0xd6, 0x4e, 0x15, 0x1b, 0xe4, 0x08, 0xc6, 0x73, 0xac, 0xf1, 0x67, 0x7b, 0x8d,
	0x5b, 0x4b, 0xd5, 0x45, 0x3d, 0x14, 0x1d, 0xc1, 0x26, 0x31, 0xec, 0x31, 0xa5, 0x26, 0xf9, 0x02,
	0x39, 0x8f, 0x4b, 0x9d, 0x79, 0x07, 0x43, 0x32, 0xee, 0x45, 0xbd, 0xa6, 0x72, 0xa9, 0xb3, 0xd1,
	0x57, 0x87, 0xf6, 0xb7, 0x86, 0xd9, 0x23, 0xda, 0x43, 0x91, 0x83, 0x41, 0x9e, 0x17, 0xf6, 0xac,
	0x6e, 0xb4, 0x29, 0x30, 0x46, 0xbb, 0x58, 0x15, 0xe0, 0x39, 0x16, 0x63, 0x63, 0xf6, 0x82, 0x3a,
	0x22, 0xf5, 0x0e, 0xac, 0xd1, 0x27, 0x7b, 0x7e, 0x81, 0xf7, 0x50, 0x5d, 0xf1, 0xac, 0x6c, 0xaf,
	0x76, 0x44, 0xca, 0x3e, 0x50, 0xca, 0x11, 0xb5, 0xb8, 0x2e, 0xeb, 0x7b, 0xbb, 0xff, 0x83, 0xd9,
	0x02, 0xb0, 0xe7, 0xd4, 0x4b, 0xb5, 0x2a, 0x0a, 0x48, 0xe3, 0x4d, 0x35, 0x4e, 0x54, 0x29, 0xd1,
	0x3b, 0x1c, 0x92, 0xb1, 0x1b, 0x3d, 0x5c, 0xf5, 0x5f, 0xae, 0xdb, 0xaf, 0xea, 0xee, 0xf4, 0x07,
	0xb9, 0x59, 0xf8, 0xe4, 0x76, 0xe1, 0x93, 0x3f, 0x0b, 0x9f, 0x7c, 0x5b, 0xfa, 0x9d, 0xdb, 0xa5,
	0xdf, 0xf9, 0xb5, 0xf4, 0x3b, 0x74, 0x24, 0xd4, 0xbe, 0x7f, 0x60, 0xea, 0xb6, 0xaf, 0xe2, 0xbc,
	0x6e, 0x9d, 0x93, 0xcf, 0x6f, 0x67, 0xff, 0x0e, 0x89, 0xfa, 0xc5, 0x67, 0x19, 0x24, 0xa8, 0x74,
	0x58, 0xa4, 0x1c, 0x79, 0x28, 0x24, 0x82, 0x96, 0x3c, 0x0b, 0x6d, 0x66, 0xa9, 0x33, 0x90, 0xdb,
	0xdf, 0xdf, 0x77, 0x67, 0x70, 0x56, 0x80, 0xfc, 0xb4, 0xa6, 0x58, 0x7e, 0xd0, 0x6e, 0x0b, 0xae,
	0x26, 0xd7, 0xf7, 0xec, 0xdc, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xa3, 0x9e, 0x01,
	0xcb, 0x03, 0x00, 0x00,
}

func (m *EntitiesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntitiesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntitiesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeEntities) > 0 {
		for iNdEx := len(m.ScopeEntities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScopeEntities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScopeEntities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeEntities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeEntities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaUrl) > 0 {
		i -= len(m.SchemaUrl)
		copy(dAtA[i:], m.SchemaUrl)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.SchemaUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EntityStates) > 0 {
		for iNdEx := len(m.EntityStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntityStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Scope.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEntities(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EntityState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DroppedAttributesCount != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.DroppedAttributesCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntities(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntities(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EntitiesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScopeEntities) > 0 {
		for _, e := range m.ScopeEntities {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	return n
}

func (m *ScopeEntities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Scope.Size()
	n += 1 + l + sovEntities(uint64(l))
	if len(m.EntityStates) > 0 {
		for _, e := range m.EntityStates {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	l = len(m.SchemaUrl)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *EntityState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovEntities(uint64(m.Timestamp))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	if m.DroppedAttributesCount != 0 {
		n += 1 + sovEntities(uint64(m.DroppedAttributesCount))
	}
	return n
}

func sovEntities(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntities(x uint64) (n int) {
	return sovEntities(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntitiesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntitiesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntitiesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeEntities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScopeEntities = append(m.ScopeEntities, &ScopeEntities{})
			if err := m.ScopeEntities[len(m.ScopeEntities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeEntities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeEntities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeEntities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Scope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityStates = append(m.EntityStates, &EntityState{})
			if err := m.EntityStates[len(m.EntityStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, v1.KeyValue{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1.KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAttributesCount", wireType)
			}
			m.DroppedAttributesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DroppedAttributesCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntities(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntities
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntities
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntities
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntities        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntities          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntities = fmt.Errorf("proto: unexpected end of group")
)
