// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/resource/v1/resource.proto

package v1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"

	v1 "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Resource information.
type Resource struct {
	// Set of attributes that describe the resource.
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes []v1.KeyValue `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes"`
	// dropped_attributes_count is the number of dropped attributes. If the value is 0, then
	// no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,2,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	// Defines the producing entity type of this resource, e.g "service", "k8s.pod", etc.
	EntityType string `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	// Set of attributes that identify the producing entity.
	// Note that the identifying attributes may be also recorded in the "attributes" field.
	EntityId []v1.KeyValue `protobuf:"bytes,4,rep,name=entity_id,json=entityId,proto3" json:"entity_id"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_446f73eacf88f3f5, []int{0}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetAttributes() []v1.KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Resource) GetDroppedAttributesCount() uint32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

func (m *Resource) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *Resource) GetEntityId() []v1.KeyValue {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func init() {
	proto.RegisterType((*Resource)(nil), "opentelemetry.proto.resource.v1.Resource")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/resource/v1/resource.proto", fileDescriptor_446f73eacf88f3f5)
}

var fileDescriptor_446f73eacf88f3f5 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xb3, 0x6d, 0x91, 0x76, 0x4b, 0x2f, 0x41, 0x24, 0xf4, 0x90, 0x94, 0x5e, 0x2c, 0x1e,
	0x36, 0x44, 0x2f, 0x5e, 0xad, 0x20, 0xa8, 0x88, 0x25, 0x94, 0x1e, 0xbc, 0x94, 0x34, 0x19, 0x42,
	0x20, 0xdd, 0x5d, 0xb6, 0x93, 0x42, 0x6e, 0x3e, 0x82, 0xcf, 0xe1, 0x0b, 0xf8, 0x0a, 0x3d, 0xf6,
	0xe8, 0x49, 0xa4, 0x7d, 0x11, 0xc9, 0x9f, 0xc6, 0x2a, 0x05, 0xc1, 0xdb, 0x64, 0xbe, 0x6f, 0x7e,
	0xdf, 0x30, 0x59, 0xca, 0x84, 0x04, 0x8e, 0x10, 0xc3, 0x1c, 0x50, 0xa5, 0xb6, 0x54, 0x02, 0x85,
	0xad, 0x60, 0x21, 0x12, 0xe5, 0x83, 0xbd, 0x74, 0xaa, 0x9a, 0xe5, 0x92, 0x6e, 0xfd, 0xf0, 0x17,
	0x4d, 0x56, 0x79, 0x96, 0x4e, 0xf7, 0x38, 0x14, 0xa1, 0x28, 0x30, 0x59, 0x55, 0x38, 0xba, 0x67,
	0x87, 0x62, 0x7c, 0x31, 0x9f, 0x0b, 0x9e, 0x85, 0x14, 0x55, 0xe1, 0xed, 0x3f, 0xd7, 0x68, 0xd3,
	0x2d, 0x89, 0xfa, 0x03, 0xa5, 0x1e, 0xa2, 0x8a, 0x66, 0x09, 0xc2, 0xc2, 0x20, 0xbd, 0xfa, 0xa0,
	0x7d, 0x7e, 0xca, 0x0e, 0x2d, 0x51, 0x32, 0x96, 0x0e, 0xbb, 0x87, 0x74, 0xe2, 0xc5, 0x09, 0x0c,
	0x1b, 0xab, 0x0f, 0x4b, 0x73, 0xf7, 0x00, 0xfa, 0x25, 0x35, 0x02, 0x25, 0xa4, 0x84, 0x60, 0xfa,
	0xdd, 0x9d, 0xfa, 0x22, 0xe1, 0x68, 0xd4, 0x7a, 0x64, 0xd0, 0x71, 0x4f, 0x4a, 0xfd, 0xaa, 0x92,
	0xaf, 0x33, 0x55, 0xb7, 0x68, 0x1b, 0x38, 0x46, 0x98, 0x4e, 0x31, 0x95, 0x60, 0xd4, 0x7b, 0x64,
	0xd0, 0x72, 0x69, 0xd1, 0x1a, 0xa7, 0x12, 0xf4, 0x3b, 0xda, 0x2a, 0x0d, 0x51, 0x60, 0x34, 0xfe,
	0xb3, 0x68, 0xb3, 0x98, 0xbf, 0x0d, 0x86, 0x6f, 0x64, 0xb5, 0x31, 0xc9, 0x7a, 0x63, 0x92, 0xcf,
	0x8d, 0x49, 0x5e, 0xb6, 0xa6, 0xb6, 0xde, 0x9a, 0xda, 0xfb, 0xd6, 0xd4, 0x68, 0x3f, 0x12, 0xec,
	0x8f, 0x7f, 0x30, 0xec, 0xec, 0xce, 0x37, 0xca, 0xa4, 0x11, 0x79, 0xba, 0x09, 0x7f, 0x0f, 0x45,
	0xd9, 0xf9, 0xe3, 0x18, 0x7c, 0x14, 0xca, 0x96, 0x81, 0x87, 0x9e, 0x1d, 0x71, 0x04, 0xc5, 0xbd,
	0xd8, 0xce, 0xbf, 0x72, 0x6a, 0x08, 0x7c, 0xff, 0x31, 0xbc, 0xd6, 0xac, 0x47, 0x09, 0x7c, 0x5c,
	0x51, 0x72, 0x3e, 0xdb, 0xa5, 0xb1, 0x89, 0x33, 0x3b, 0xca, 0xe7, 0x2e, 0xbe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x6d, 0x91, 0x49, 0xd5, 0x58, 0x02, 0x00, 0x00,
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntityId) > 0 {
		for iNdEx := len(m.EntityId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntityId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResource(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EntityType) > 0 {
		i -= len(m.EntityType)
		copy(dAtA[i:], m.EntityType)
		i = encodeVarintResource(dAtA, i, uint64(len(m.EntityType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DroppedAttributesCount != 0 {
		i = encodeVarintResource(dAtA, i, uint64(m.DroppedAttributesCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResource(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintResource(dAtA []byte, offset int, v uint64) int {
	offset -= sovResource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovResource(uint64(l))
		}
	}
	if m.DroppedAttributesCount != 0 {
		n += 1 + sovResource(uint64(m.DroppedAttributesCount))
	}
	l = len(m.EntityType)
	if l > 0 {
		n += 1 + l + sovResource(uint64(l))
	}
	if len(m.EntityId) > 0 {
		for _, e := range m.EntityId {
			l = e.Size()
			n += 1 + l + sovResource(uint64(l))
		}
	}
	return n
}

func sovResource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResource(x uint64) (n int) {
	return sovResource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1.KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAttributesCount", wireType)
			}
			m.DroppedAttributesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DroppedAttributesCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = append(m.EntityId, v1.KeyValue{})
			if err := m.EntityId[len(m.EntityId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResource = fmt.Errorf("proto: unexpected end of group")
)
